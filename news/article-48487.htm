<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://winxraynode.github.io/news/article-48487.htm" />
    <meta charset="utf-8">
    <!-- Always force latest IE rendering engine -->
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <!-- Mobile Specific Meta -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>javascript异步：callback-promise-async/await</title>
        <meta name="description" content="javascript异步：callback-promise-async/await  一、相关概念   1、异步和同步 2、阻塞和非阻塞   二、callback 三、Promise   1.Prom" />
        <link rel="icon" href="/assets/website/img/winxraynode/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="WinXray Node节点订阅站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://winxraynode.github.io/news/article-48487.htm" />
    <meta property="og:site_name" content="WinXray Node节点订阅站" />
    <meta property="og:title" content="javascript异步：callback-promise-async/await" />
    <meta property="og:image" content="https://winxraynode.github.io/uploads/20240721/4e822db521c7d86b41c617478020230c.webp" />
        <meta property="og:release_date" content="2025-01-30T06:45:40" />
    <meta property="og:updated_time" content="2025-01-30T06:45:40" />
        <meta property="og:description" content="javascript异步：callback-promise-async/await  一、相关概念   1、异步和同步 2、阻塞和非阻塞   二、callback 三、Promise   1.Prom" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="javascript异步：callback-promise-async/await">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    
    <!-- BOOTSTRAP CSS -->
    <link rel="stylesheet" href="/assets/website/css/winxraynode/bootstrap.min.css">
    <!-- FONT-AWESOME -->
    <link rel="stylesheet" href="/assets/website/css/winxraynode/font-awesome-4.7.0/css/font-awesome.min.css">
    <!-- OWL CAROUSEL -->
    <link href="/assets/website/css/winxraynode/owl.carousel.min.css" rel="stylesheet">
    <link href="/assets/website/css/winxraynode/owl.theme.default.min.css" rel="stylesheet">
    <!-- LIGHTBOX -->
    <link rel=" stylesheet" href="/assets/website/css/winxraynode/lightbox.css">
    <!--Style CSS file-->
    <link rel=" stylesheet" href="/assets/website/css/winxraynode/style.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-NR13X0JQB2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-NR13X0JQB2');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- ====== Preloader ======  -->
    <div id="loader-wrapper">
        <div id="loader"></div>
        <div class="loader-section section-left"></div>
        <div class="loader-section section-right"></div>
    </div>
    <!-- ======End Preloader ======  -->
    <!-- ======START NAVGITION ======  -->
    <!-- Menu -->
    <div class="main-menu">
        <div class="container">
            <nav class="navbar navbar-expand-lg">
                <!-- logo -->
                                <a class="navbar-brand" href="/">
                    Winxray Node
                </a>
                

                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarText">
                    <span class="icon-bar"><i class="fa fa-bars fa-2x"></i></span>
                </button>
                <!--End of Resposive Toggle icon-->
                <div class="collapse navbar-collapse" id="navbarText">
                    <!--Main menu navigation list-->
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/free-nodes/">免费节点</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/news/">新闻资讯</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                    <!--End of Main menu navigation list-->
                </div>
                <!--End of resposive collapse class-->
            </nav>
        </div>
    </div>
    <!-- Menu -->
    <!-- ====== END NAVGITION ======  -->
    <!-- =======START HEADER=========== -->
    <header class="home category" id="home" data-scroll-index="0">
        <div class="container">
            <div class="row">
                <div class="col-lg-7 home-content mt-md-5 mt-sm-5">
                    <h1 class="heading-primary mb-3 title">
                        javascript异步：callback-promise-async/await                    </h1>
                    <p class="mb-5">
                        <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / <span>正文</span>
                    </p>
                </div>
            </div>
        </div>
    </header>
    <!-- ====== END HEADER ======  -->
    <!-- Scroll to Top -->
    <div id="scroll-to-top"><i class="fa fa-arrow-up fa-fw"></i></div>
    <!-- ====== START ABOUT ======  -->
    <section class="about padding" id="about" data-scroll-index="1">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="XRayNode每日订阅站" data-url="https://xraynode.github.io">
                  				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <div class="toc"> <h3>javascript异步：callback-promise-async/await</h3> <ul> <li><a href="#_2" rel="nofollow">一、相关概念</a></li> <li> <ul> <li><a href="#1_4" rel="nofollow">1、异步和同步</a></li> <li><a href="#2_8" rel="nofollow">2、阻塞和非阻塞</a></li> </ul> </li> <li><a href="#callback_12" rel="nofollow">二、callback</a></li> <li><a href="#Promise_27" rel="nofollow">三、Promise</a></li> <li> <ul> <li><a href="#1Promise_28" rel="nofollow">1.Promise含义</a></li> <li><a href="#2_32" rel="nofollow">2.基本用法</a></li> <li><a href="#3Promisedemo_53" rel="nofollow">3、Promise异步（demo实例）</a></li> <li><a href="#3Promiseall_87" rel="nofollow">3、Promise.all</a></li> </ul> </li> <li><a href="#Asyncawait_118" rel="nofollow">四、Async\await</a></li> <li> <ul> <li><a href="#1_120" rel="nofollow">1、含义</a></li> <li><a href="#2_134" rel="nofollow">2、用法</a></li> <li> <ul> <li><a href="#20awaitasync_136" rel="nofollow">2.0、await\async</a></li> <li><a href="#21awaitresolve_157" rel="nofollow">2.1、await-resolve</a></li> <li><a href="#23rejectthencatch_204" rel="nofollow">2.3、reject-then/catch</a></li> <li><a href="#24rejecttrycatch_235" rel="nofollow">2.4、reject-try/catch</a></li> </ul> </li> </ul> </li> <li><a href="#_266" rel="nofollow">参考</a></li> </ul> </div> <p> JS三座大山：原型原型链、作用域闭包、同步异步。</p> </h1> <p>首先我们先了解<strong>同步、异步</strong>，<strong>阻塞、非阻塞</strong>等四个概念；</p> <h2><a id="1_4" rel="nofollow"></a>1、异步和同步</h2> <ul> <li>同步和异步强调的是消息<mark>通信机制</mark> (synchronous communication/ asynchronous communication)</li> <li><mark>同步</mark>是指：当程序1调用程序2时，程序1停下不动，直到程序2完成回到程序1来，程序1才继续执行下去。</li> <li><mark>异步</mark>是指：当程序1调用程序2时，程序1径自继续自己的下一个动作，不受程序2的的影响。</li> </ul> <h2><a id="2_8" rel="nofollow"></a>2、阻塞和非阻塞</h2> <ul> <li>阻塞和非阻塞强调的是程序在等待调用结果（消息，返回值）时的<mark>状态</mark>.</li> <li><mark>阻塞调用</mark>是指调用结果返回之前，当前线程会被挂起。调用线程只有在得到结果之后才会返回。</li> <li><mark>非阻塞调</mark>用指在不能立刻得到结果之前，该调用不会阻塞当前线程。</li> </ul> </h1> <p>例子：</p> <pre><code class="prism language-javascript"><span class="token keyword">function</span><span class="token function">foo</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">//定义函数的时候将另一个函数（回调函数）作为参数传入定义的函数中。</span><span class="token function">$ajax</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span><span class="token comment">//...</span>         success<span class="token punctuation">:</span>callback<span class="token comment">//异步操作执行完毕后，再执行该回调函数，确保回调在异步操作之后执行。</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span><span class="token function">myCallback</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">//...</span><span class="token punctuation">}</span><span class="token function">foo</span><span class="token punctuation">(</span>myCallback<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>关于回调函数可以参考我的另外一篇博客：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/junxuezheng/article/details/109229343"  rel="nofollow">JavaScript同步回调和异步回调（个人理解）</a></p> </h1> <h2><a id="1Promise_28" rel="nofollow"></a>1.Promise含义</h2> <p>Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。它由社区最早提出和实现，ES6 将其写进了语言标准，统一了用法，原生提供了Promise对象。</p> <p>所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。</p> <h2><a id="2_32" rel="nofollow"></a>2.基本用法</h2> <ul> <li>例子</li> </ul> <pre><code class="prism language-javascript"><span class="token keyword">function</span><span class="token function">f1</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">new</span><span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token operator">===</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'sucess'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{<!-- --></span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'faile'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//输出sucess</span></code></pre> <ul> <li> <p>（1）对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。</p> </li> <li> <p>（2）一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从pending变为fulfilled和从pending变为rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 resolved（已定型）。如果改变已经发生了，你再对Promise对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。</p> </li> </ul> <h2><a id="3Promisedemo_53" rel="nofollow"></a>3、Promise异步（demo实例）</h2> <p>例子1</p> <pre><code class="prism language-javascript"><span class="token comment">// 故意把f1函数写错（data写错成dat）</span><span class="token keyword">function</span><span class="token function">f1</span><span class="token punctuation">(</span>dat<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">new</span><span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token operator">===</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'sucess'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{<!-- --></span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'faile'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span><span class="token function">f2</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">new</span><span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token operator">===</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'sucess'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{<!-- --></span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'faile'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">f2</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <ul> <li>输出如下图，可以看到，即使f1出错了，f2也输出了函数的结果</li> </ul> <blockquote> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220830/a06186433234d985095b4ea44639823c.jpg" alt="javascript异步：callback-promise-async/await"></p> </blockquote> <h2><a id="3Promiseall_87" rel="nofollow"></a>3、Promise.all</h2> <p>Promise.all()方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。</p> <ul> <li>只有Promise.all()中多个实例的状态都变成fulfilled，或者其中有一个变为rejected，才会调用Promise.all方法后面的回调函数。</li> </ul> <pre><code class="prism language-javascript"><span class="token keyword">function</span><span class="token function">f1</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">new</span><span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token operator">===</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'sucess-1'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{<!-- --></span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'faile-1'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span><span class="token function">f2</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">new</span><span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token operator">===</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'sucess-2'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{<!-- --></span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'faile-2'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">f2</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// faile-2</span></code></pre> </h1> <p>Async\await和Promise一样是非阻塞的，Async 的价值在于用写同步的方式写异步，1避免了阻塞，2必免写回调</p> <h2><a id="1_120" rel="nofollow"></a>1、含义</h2> <p>ES2017 标准引入了 async 函数，使得异步操作变得更加方便。</p> <p>async 函数是什么？一句话，它就是 Generator 函数的语法糖。（这是阮一峰说的,不是太明白，generate函数在此不展开，后期研究清楚后再讲）</p> <ul> <li> <p>async：定义异步函数<br /> 1）自动把函数转换为Promise<br /> 2）当调用异步函数时，函数返回值会被resolve处理<br /> 3）异步函数内部可以使用await</p> </li> <li> <p>await:暂停异步函数的执行<br /> 1）当使用在Promise前面时，await等待Promise完成，并返回Promise的resolve的结果<br /> 2）await只能和Promise一起使用，不能和callback一起使用<br /> 3）await只能用在async函数中</p> </li> </ul> <h2><a id="2_134" rel="nofollow"></a>2、用法</h2> <p>async 函数返回一个 Promise 对象，promise 返回的 resolve 对象可能用 await 去接，但是 reject 无法用 await 接收到，所以要用 try catch 去处理。（当然还有Promise运行过程中的错误，也可以catch到）</p> <h3><a id="20awaitasync_136" rel="nofollow"></a>2.0、await\async</h3> <p>async：自动把函数转换为Promise；所以，此处的<mark>async function f1()</mark>， 和2.1中的**<mark>return new Promise（）</mark>**是一样的；</p> <pre><code class="prism language-js"><span class="token keyword">async</span><span class="token keyword">function</span><span class="token function">f1</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token operator">===</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'sucess-1'</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token string">'sucess-1'</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{<!-- --></span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'faile-1'</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token string">'faile-1'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">async</span><span class="token keyword">function</span><span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">var</span> f11<span class="token operator">=</span><span class="token keyword">await</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f11<span class="token operator">+</span><span class="token string">'main'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// sucess-1</span><span class="token comment">// sucess-1main</span></code></pre> <h3><a id="21awaitresolve_157" rel="nofollow"></a>2.1、await-resolve</h3> <p>以下demo正常运行；</p> <ul> <li>例子1</li> </ul> <pre><code class="prism language-javascript"><span class="token keyword">function</span><span class="token function">f1</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">new</span><span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token operator">===</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'sucess-1'</span><span class="token punctuation">)</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'sucess-1'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{<!-- --></span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'faile-1'</span><span class="token punctuation">)</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'faile-1'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">async</span><span class="token keyword">function</span><span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">var</span> f11<span class="token operator">=</span><span class="token keyword">await</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f11<span class="token operator">+</span><span class="token string">'main'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// sucess-1</span><span class="token comment">// sucess-1main</span></code></pre> <p>把上面例子输入改为2，可以看到f11并没有收到返回值；并且代码报错了</p> <ul> <li>例子2</li> </ul> <pre><code class="prism language-javascript"><span class="token keyword">function</span><span class="token function">f1</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">new</span><span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token operator">===</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'sucess-1'</span><span class="token punctuation">)</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'sucess-1'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{<!-- --></span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'faile-1'</span><span class="token punctuation">)</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'faile-1'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">async</span><span class="token keyword">function</span><span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">var</span> f11<span class="token operator">=</span><span class="token keyword">await</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f11<span class="token operator">+</span><span class="token string">'main'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre> <p>错误信息如下<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220830/f6f6c3518a6e208403f2dcaf4a593f6b.jpg" alt="javascript异步：callback-promise-async/await"></p> <h3><a id="23rejectthencatch_204" rel="nofollow"></a>2.3、reject-then/catch</h3> <p>用catch接收Promise中的错误，await接收resolve,</p> <ul> <li>例子3（外层catch错误）<br /> then接收返回值，catch捕捉Promise中reject的错误，和运行中的错误；</li> </ul> <pre><code class="prism language-javascript"><span class="token keyword">function</span><span class="token function">f1</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">new</span><span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token operator">===</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'sucess-1'</span><span class="token punctuation">)</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'sucess-1'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{<!-- --></span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'faile-1'</span><span class="token punctuation">)</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'faile-1'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">async</span><span class="token keyword">function</span><span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">var</span> f11<span class="token operator">=</span><span class="token keyword">await</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f11<span class="token operator">+</span><span class="token string">'main'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>error<span class="token operator">=&gt;</span><span class="token punctuation">{<!-- --></span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token operator">+</span><span class="token string">'catch'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// faile-1</span><span class="token comment">// faile-1catch</span></code></pre> <h3><a id="24rejecttrycatch_235" rel="nofollow"></a>2.4、reject-try/catch</h3> <ul> <li>例子4：<br /> 直接在await的外层使用try/catch（即async里面catch错误）</li> </ul> <pre><code class="prism language-javascript"><span class="token keyword">function</span><span class="token function">f1</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">new</span><span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token operator">===</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'sucess-1'</span><span class="token punctuation">)</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'sucess-1'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{<!-- --></span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'faile-1'</span><span class="token punctuation">)</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'faile-1'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">async</span><span class="token keyword">function</span><span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">try</span><span class="token punctuation">{<!-- --></span><span class="token keyword">var</span> f11<span class="token operator">=</span><span class="token keyword">await</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token operator">+</span><span class="token string">'try/catch'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f11<span class="token operator">+</span><span class="token string">'main'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// faile-1</span><span class="token comment">// faile-1try/catch</span><span class="token comment">// undefinedmain</span></code></pre> </h1> <p>【1】<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/IT-CPC/p/10898871.html"  rel="nofollow">同步(Synchronous)和异步(Asynchronous)</a><br /> 【2】<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/rainbow70626/p/8094199.html"  rel="nofollow">同步和异步的概念</a><br /> 【3】<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://segmentfault.com/a/1190000013141641"  rel="nofollow">JS 异步(callback→Promise→async/await)</a><br /> 【4】<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://es6.ruanyifeng.com/#docs/promise"  rel="nofollow">阮一峰-Promise 对象</a><br /> 【5】<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://www.ruanyifeng.com/blog/2015/05/async.html"  rel="nofollow">阮一峰-async 函数的含义和用法</a></p> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-48155.htm">动物疫苗公司10强名单公布 动物疫苗公司10强名单公布时间</a></p>
                                        <p>下一个：<a href="/news/article-48488.htm">重庆哪里可以领养宠物猫咪的（重庆哪里可以领养猫猫）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-44707.htm" title="上海宠物救助站浦东新区（上海宠物狗救助站）">上海宠物救助站浦东新区（上海宠物狗救助站）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-10-latest-winxray-node.htm" title="「11月10日」最高速度21.5M/S，2024年WinXray每天更新免费节点订阅链接">「11月10日」最高速度21.5M/S，2024年WinXray每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-26-today-winxray-node.htm" title="「12月26日」最高速度19.9M/S，2024年WinXray每天更新免费节点订阅链接">「12月26日」最高速度19.9M/S，2024年WinXray每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-14-free-node-subscribe.htm" title="「12月14日」最高速度20.5M/S，2024年WinXray每天更新免费节点订阅链接">「12月14日」最高速度20.5M/S，2024年WinXray每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-16-latest-winxray-node.htm" title="「12月16日」最高速度22.3M/S，2024年WinXray每天更新免费节点订阅链接">「12月16日」最高速度22.3M/S，2024年WinXray每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-18-free-subscribe-node.htm" title="「11月18日」最高速度22.4M/S，2024年WinXray每天更新免费节点订阅链接">「11月18日」最高速度22.4M/S，2024年WinXray每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-9-free-node-subscribe-links.htm" title="「11月9日」最高速度18.7M/S，2024年WinXray每天更新免费节点订阅链接">「11月9日」最高速度18.7M/S，2024年WinXray每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-37719.htm" title="linux交叉编译openssl,【经验分享】linux交叉编译 &#8211; openssl动态库">linux交叉编译openssl,【经验分享】linux交叉编译 &#8211; openssl动态库</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-24-winxray-github.htm" title="「11月24日」最高速度22.3M/S，2024年WinXray每天更新免费节点订阅链接">「11月24日」最高速度22.3M/S，2024年WinXray每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-8-today-winxray-node.htm" title="「12月8日」最高速度19M/S，2024年WinXray每天更新免费节点订阅链接">「12月8日」最高速度19M/S，2024年WinXray每天更新免费节点订阅链接</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">6</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
    <!-- ====== END ABOUT======  -->
        <!-- ====== START FOOTER BOTTOM======  -->
    <section class="footer-bottom">
        <div class="container">
            <div class="row">
                <div class="offset-md-3 col-md-6 offset-md-3">
                    <!-- START RIGHTS -->
                    <div class="copyright">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                        <p>WinXray Node节点订阅站 版权所有</p>
                        <p>Powered by WordPress</p>
                    </div>
                    <!-- END RIGHTS -->
                </div>
            </div>
        </div>
    </section>
    <!-- ====== END FOOTER BOTTOM======  -->
    <!-- ====== JS ======  -->
    <!--jquery-3.3.1 js-->
    <script src="/assets/website/js/frontend/winxraynode/jquery-3.3.1.min.js"></script>
    <!-- popper js -->
    <script src="/assets/website/js/frontend/winxraynode/popper.min.js"></script>
    <!-- bootstrap js -->
    <script src="/assets/website/js/frontend/winxraynode/bootstrap.min.js"></script>
    <!-- scrollIt js -->
    <script src="/assets/website/js/frontend/winxraynode/scrollIt.min.js"></script>
    <!-- countTo js -->
    <script src="/assets/website/js/frontend/winxraynode/jquery.countTo.js"></script>
    <!-- filter js -->
    <script src="/assets/website/js/frontend/winxraynode/jquery.filterizr.min.js"></script>
    <!-- waypoints js -->
    <script src="/assets/website/js/frontend/winxraynode/waypoints.min.js"></script>
    <!-- owl carousel js -->
    <script src="/assets/website/js/frontend/winxraynode/owl.carousel.min.js"></script>
    <!-- validator js -->
    <script src="/assets/website/js/frontend/winxraynode/validator.js"></script>
    <!-- coustom js -->
    <script src="/assets/website/js/frontend/winxraynode/main.js"></script>
    <!-- lightbox js -->
    <script src="/assets/website/js/frontend/winxraynode/lightbox.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>